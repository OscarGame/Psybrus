#ifndef __PSYBRUSUTILITY_PSH__
#define __PSYBRUSUTILITY_PSH__

#include <PsybrusTypes.psh>

// Generated header.
#include <UniformView.psh>

//////////////////////////////////////////////////////////////////////////
// transpose & mul
#if ( PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL && PSY_INPUT_CODE_TYPE < PSY_CODE_TYPE_GLSL_150 ) || ( PSY_OUTPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL && PSY_OUTPUT_CODE_TYPE < PSY_CODE_TYPE_ESSL_300 )
float3x3 transpose( float3x3 In )
{
	return float3x3( 
		float3( In[0].x, In[1].x, In[2].x ),
		float3( In[0].y, In[1].y, In[2].y ),
		float3( In[0].z, In[1].z, In[2].z ) );
}

float4x4 transpose( float4x4 In )
{
	return float4x4( 
		float4( In[0].x, In[1].x, In[2].x, In[3].x ),
		float4( In[0].y, In[1].y, In[2].y, In[3].y ),
		float4( In[0].z, In[1].z, In[2].z, In[3].z ),
		float4( In[0].w, In[1].w, In[2].w, In[3].w ) );
}
#endif // ( PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL && PSY_INPUT_CODE_TYPE < PSY_CODE_TYPE_GLSL_150 ) || ( PSY_OUTPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL && PSY_OUTPUT_CODE_TYPE < PSY_CODE_TYPE_ESSL_300 )

#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL || PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL
float3 mul( float3x3 M, float3 V )
{
	return M * V;
}

float4 mul( float4x4 M, float4 V )
{
	return M * V;
}

float3x3 mul( float3x3 M, float3x3 V )
{
	return M * V;
}

float4x4 mul( float4x4 M, float4x4 V )
{
	return M * V;
}

#endif // PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL || PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL

#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL
uint reversebits( uint Bits )
{
	uint Reverse = Bits;
	Reverse = (Bits << 16u) | (Bits >> 16u);
	Reverse = ((Reverse & 0x00ff00ffu) << 8u) | ((Reverse & 0xff00ff00u) >> 8u);
	Reverse = ((Reverse & 0x0f0f0f0fu) << 4u) | ((Reverse & 0xf0f0f0f0u) >> 4u);
	Reverse = ((Reverse & 0x33333333u) << 2u) | ((Reverse & 0xccccccccu) >> 2u);
	Reverse = ((Reverse & 0x55555555u) << 1u) | ((Reverse & 0xaaaaaaaau) >> 1u);
	return Reverse;
}
#endif

//////////////////////////////////////////////////////////////////////////
// textureQueryLevels implementations (glslang doesn't support yet)
#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_D3D11
int textureQueryLevels( const Texture1D<float4> InTex )
{
	int Width;
	int NumberOfLevels = 1;
	InTex.GetDimensions( 0, Width, NumberOfLevels );
	return NumberOfLevels;
}

int textureQueryLevels( const Texture2D<float4> InTex )
{
	int Width;
	int Height;
	int NumberOfLevels = 1;
	InTex.GetDimensions( 0, Width, Height, NumberOfLevels );
	return NumberOfLevels;
}

int textureQueryLevels( const Texture3D<float4> InTex )
{
	int Width;
	int Height;
	int Depth;
	int NumberOfLevels = 1;
	InTex.GetDimensions( 0, Width, Height, Depth, NumberOfLevels );
	return NumberOfLevels;
}

int textureQueryLevels( const TextureCube<float4> InTex )
{
	int Width;
	int Height;
	int NumberOfLevels = 1;
	InTex.GetDimensions( 0, Width, Height, NumberOfLevels );
	return NumberOfLevels;
}

int textureSize( const Texture1D<float4> InTex, int Level )
{
	int Width;
	int NumberOfLevels = 1;
	InTex.GetDimensions( Level, Width, NumberOfLevels );

	return Width;
}

int2 textureSize( const Texture2D<float4> InTex, int Level )
{
	int Width;
	int Height;
	int NumberOfLevels = 1;
	InTex.GetDimensions( Level, Width, Height, NumberOfLevels );

	return int2( Width, Height );
}

int3 textureSize( const Texture3D<float4> InTex, int Level )
{
	int Width;
	int Height;
	int Depth;
	int NumberOfLevels = 1;
	InTex.GetDimensions( Level, Width, Height, Depth, NumberOfLevels );

	return int3( Width, Height, Depth );
}

int2 textureSize( const TextureCube<float4> InTex, int Level )
{
	int Width;
	int Height;
	int NumberOfLevels = 1;
	int NumberOfSamples;
	InTex.GetDimensions( Level, Width, Height, NumberOfLevels );

	return int2( Width, Height );
}

#elif PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL

// NOT GOOD, IMPROVE.
int textureQueryLevels( sampler1D Sampler )
{
	int Size = textureSize( Sampler, 0 );
	int MipCount = 1;
	for( MipCount = 1; MipCount < 16; ++MipCount )
	{
		if( Size > 4 )
		{
			Size /= 2;
		}
		else
		{
			break;
		}
	}
	return MipCount;
}

// NOT GOOD, IMPROVE.
int textureQueryLevels( sampler2D Sampler )
{
	int2 Size = textureSize( Sampler, 0 );
	int MipCount = 1;
	for( MipCount = 1; MipCount < 16; ++MipCount )
	{
		if( Size.x > 4 )
		{
			Size.x /= 2;
		}
		else
		{
			break;
		}
	}
	return MipCount;
}

// NOT GOOD, IMPROVE.
int textureQueryLevels( sampler3D Sampler )
{
	int3 Size = textureSize( Sampler, 0 );
	int MipCount = 1;
	for( MipCount = 1; MipCount < 16; ++MipCount )
	{
		if( Size.x > 4 )
		{
			Size.x /= 2;
		}
		else
		{
			break;
		}
	}
	return MipCount;
}

// NOT GOOD, IMPROVE.
int textureQueryLevels( samplerCube Sampler )
{
	int2 Size = textureSize( Sampler, 0 );
	int MipCount = 1;
	for( MipCount = 1; MipCount < 16; ++MipCount )
	{
		if( Size.x > 4 )
		{
			Size.x /= 2;
		}
		else
		{
			break;
		}
	}
	return MipCount;
}

#elif PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL

int textureQueryLevels( sampler2D Sampler )
{
	return 1;
}

int textureQueryLevels( samplerCube Sampler )
{
	return 1;
}

int2 textureSize( sampler2D Sampler, int Level )
{
	return int2( 1, 1 );
}

#endif


//////////////////////////////////////////////////////////////////////////
// TBN matrix building
float3x3 buildTBN( float3 InTangent, float3 InBinormal, float3 InNormal )
{
	return getFloat3x3( normalize( InTangent ), normalize( InBinormal ), normalize( InNormal ) );
}

//////////////////////////////////////////////////////////////////////////
// Colour space conversion.
#if PSY_INPUT_CODE_TYPE == PSY_CODE_TYPE_ESSL_100
#  define FAST_GAMMA_CONVERSION ( 1 )
#else
#  define ACCURATE_GAMMA_CONVERSION ( 1 )
#endif

float3 gammaToLinear( float3 InputRGBA )
{
#if FAST_GAMMA_CONVERSION
	return InputRGBA.rgb * InputRGBA.rgb;
#elif ACCURATE_GAMMA_CONVERSION
	// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf pg87
	float3 linearRGBLo = InputRGBA / 12.92;
	float3 linearRGBHi = pow( ( InputRGBA + 0.055 ) / 1.055, float3( 2.4, 2.4, 2.4 ) ) ;
	return float3( 
		( InputRGBA.x <= 0.04045 ) ? linearRGBLo.x : linearRGBHi.x,
		( InputRGBA.y <= 0.04045 ) ? linearRGBLo.y : linearRGBHi.y,
		( InputRGBA.z <= 0.04045 ) ? linearRGBLo.z : linearRGBHi.z );
#else
	float Gamma = 2.2;
	return pow( max( float3( 0.0, 0.0, 0.0 ), InputRGBA.rgb ), float3( Gamma, Gamma, Gamma ) );
#endif
}

float4 gammaToLinear( float4 InputRGBA )
{
	return float4( gammaToLinear( InputRGBA.rgb ), InputRGBA.a );
}

float3 linearToGamma( float3 InputRGBA )
{
#if FAST_GAMMA_CONVERSION
	return sqrt( InputRGBA.rgb );
#elif ACCURATE_GAMMA_CONVERSION
	// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf pg87
	float3 sRGBLo = InputRGBA * 12.92;
	float3 sRGBHi = ( pow( abs( InputRGBA ) , float3( 1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4 ) ) * 1.055) - 0.055;
	return float3(
		( InputRGBA.x <= 0.0031308 ) ? sRGBLo.x : sRGBHi.x,
		( InputRGBA.y <= 0.0031308 ) ? sRGBLo.y : sRGBHi.y,
		( InputRGBA.z <= 0.0031308 ) ? sRGBLo.z : sRGBHi.z );
#else	
	float InvGamma = 1.0 / 2.2;
	return pow( max( float3( 0.0, 0.0, 0.0 ), InputRGBA.rgb ), float3( InvGamma, InvGamma, InvGamma ) );
#endif
}

float4 linearToGamma( float4 InputRGBA )
{
	return float4( linearToGamma( InputRGBA.rgb ), InputRGBA.a );
}

//////////////////////////////////////////////////////////////////////////
// HLSL functions
#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL || PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL
float saturate( float X )
{
	return clamp( X, 0.0, 1.0 );
}

float2 saturate( float2 X )
{
	return clamp( X, float2( 0.0, 0.0 ), float2( 1.0, 1.0 ) );
}

float3 saturate( float3 X )
{
	return clamp( X, float3( 0.0, 0.0, 0.0 ), float3( 1.0, 1.0, 1.0 ) );
}

float4 saturate( float4 X )
{
	return clamp( X, float4( 0.0, 0.0, 0.0, 0.0 ), float4( 1.0, 1.0, 1.0, 1.0 ) );
}

float atan2( float Y, float X )
{
	return atan( Y, X );
}

#endif

//////////////////////////////////////////////////////////////////////////
// Normal encoding/decoding
float3 encodeNormal( float3 Normal )
{
	const float3 Scale = float3( 0.5, 0.5, 0.5 );
	return Normal * Scale + Scale;
}

float3 decodeNormal( float3 Normal )
{
	const float3 Scale = float3( 2.0, 2.0, 2.0 );
	return Normal * Scale - float3( 1.0, 1.0, 1.0 );
}

float3 reconstructNormal( float3 Normal )
{
	return float3( Normal.xy, sqrt( 1.0 - dot( Normal.xy, Normal.xy ) ) );
}

//////////////////////////////////////////////////////////////////////////
// Depth utility.
float linearDepth( float DepthSample, float Near, float Far )
{
	DepthSample = 2.0 * DepthSample - 1.0;
	return ( 2.0 * ( Near * Far ) ) / ( ( Near + Far ) - DepthSample * ( Far - Near ) );
}

//////////////////////////////////////////////////////////////////////////
// luminance
float luminance( float3 Input )
{
	return dot( Input, float3( 0.2126, 0.7152, 0.0722 ) );
}

//////////////////////////////////////////////////////////////////////////
// Misc.
float3 getViewPosition()
{
#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_D3D11
	return float3( InverseViewTransform_[0].w, InverseViewTransform_[1].w, InverseViewTransform_[2].w );
#else
	return InverseViewTransform_[3].xyz;
#endif
}


#endif // __PSYBRUSUTILITY_PSH__
