#ifndef __PSYBRUSLIGHTING_PSH__
#define __PSYBRUSLIGHTING_PSH__

// Generated header.
#include <UniformLight.psh>

#define LIGHTING_EPSILON  ( 1e-6 )
#define DIELECTRIC_F0 ( 0.04 )

#if PSY_INPUT_CODE_TYPE == PSY_CODE_TYPE_GLSL_ES_100
#  define USE_SPECULAR_BLINN_PHONG ( 1 )
#  define USE_SPECULAR_GGX ( 0 )
#  define NOOF_FORWARD_LIGHTS ( 4 )
#else
#  define USE_SPECULAR_BLINN_PHONG ( 0 )
#  define USE_SPECULAR_GGX ( 1 )
#  define NOOF_FORWARD_LIGHTS ( 4 )
#endif


//////////////////////////////////////////////////////////////////////////
// Light
struct Light
{
	float3 Position_;
	float3 Colour_;
	float3 AttenuationCLQ_;
};

//////////////////////////////////////////////////////////////////////////
// Material
struct Material
{
	float3 Colour_;
	float Roughness_;
	float Metallic_;
};


//////////////////////////////////////////////////////////////////////////
// Surface
struct Surface
{
	float3 DiffuseColour_;
	float3 SpecularColour_;
	float Roughness_;

	float3 SurfacePosition_;
	float3 Normal_;

	// Not strictly surface, but useful.
	float3 ViewPosition_;
	float3 ViewVector_;
	float NdotV_;
};

//////////////////////////////////////////////////////////////////////////
// SetupSurface
Surface SetupSurface( Material InMaterial, in float3 ViewPosition, in float3 SurfacePosition, in float3 Normal )
{
	Surface OutSurface;
	// Calculate diffuse + spec material colours.
	float3 DielectricSpecular = float3( DIELECTRIC_F0, DIELECTRIC_F0, DIELECTRIC_F0 );
	OutSurface.DiffuseColour_ = ( InMaterial.Colour_ - InMaterial.Colour_ * InMaterial.Metallic_ );
	OutSurface.SpecularColour_ = lerp( DielectricSpecular, InMaterial.Colour_, InMaterial.Metallic_ );

	OutSurface.Roughness_ = InMaterial.Roughness_;
	OutSurface.Normal_ = Normal;
	OutSurface.ViewVector_ = normalize( ViewPosition - SurfacePosition );
	OutSurface.NdotV_ = max( LIGHTING_EPSILON, dot( Normal, OutSurface.ViewVector_ ) );

	OutSurface.ViewPosition_ = ViewPosition;
	OutSurface.SurfacePosition_ = SurfacePosition;

	return OutSurface;
}

//////////////////////////////////////////////////////////////////////////
// Pow5
float Pow5( float Val )
{
	return Val * Val * Val * Val * Val;
}

//////////////////////////////////////////////////////////////////////////
// calculateAttenuation
float calculateAttenuation( float Distance, float3 Attenuation )
{
	float InvA = ( ( Attenuation.x + ( Distance * Attenuation.y ) + ( Distance * Distance * Attenuation.z ) ) );
	return 1.0 / InvA;
}

//////////////////////////////////////////////////////////////////////////
// RoughnessToSpecularPower
float RoughnessToSpecularPower( float Roughness )
{
	return 1024.0 * Pow5( 1.0 - Roughness ) + 1.0;
}

//////////////////////////////////////////////////////////////////////////
// Fresnel_SchlickApproximation

float3 Fresnel_SchlickApproximation( float3 F0, float CosA )
{
	float Pow5OneMinusCosA = Pow5( 1.0 - CosA );
	return F0 + ( float3( 1.0, 1.0, 1.0 ) - F0 ) * Pow5OneMinusCosA;
}

//////////////////////////////////////////////////////////////////////////
// NDF_BlinnPhongNormalised
// Equation 19: https://dl.dropboxusercontent.com/u/55891920/papers/mm_brdf.pdf
float NDF_BlinnPhongNormalised( float NdotH, float N )
{
	float NormTerm = ( N + 2.0 ) / ( PIMUL2 );
	float SpecTerm = pow( max( 0.0, NdotH ), N );
	return NormTerm * SpecTerm;
}
//////////////////////////////////////////////////////////////////////////
// NDF_GGX
// http://www.filmicworlds.com/2014/04/21/optimizing-ggx-shaders-with-dotlh/
float NDF_GGX( float NdotH, float Roughness )
{
	float Alpha = Roughness * Roughness;
	float AlphaSquared = Alpha * Alpha;
	float Denominator = NdotH * NdotH * ( AlphaSquared - 1.0 ) + 1.0;
	return AlphaSquared / ( PI * Denominator * Denominator );
}

//////////////////////////////////////////////////////////////////////////
// GeometryVisibility_CookTorrence
float GeometryVisibility_CookTorrence( float NdotL, float NdotV, float NdotH, float VdotH )
{
	float G = 1.0;
	G = min( G, ( 2.0 * NdotH * NdotV ) / VdotH );
	G = min( G, ( 2.0 * NdotH * NdotL ) / VdotH );
	return G;
}

//////////////////////////////////////////////////////////////////////////
// GeometryVisibility_SmithGGXApprox
// http://www.filmicworlds.com/2014/04/21/optimizing-ggx-shaders-with-dotlh/
float GeometryVisibility_SmithGGXApprox( float LdotH, float Roughness )
{
	float K = ( Roughness * Roughness ) / 2.0;
	float KSquared = K * K;
	float InvKSquared = 1.0 - KSquared;
	return 1.0 / ( LdotH * LdotH * InvKSquared + KSquared );
}

//////////////////////////////////////////////////////////////////////////
// EnvBRDFApprox
// TODO: half.
// https://www.unrealengine.com/blog/physically-based-shading-on-mobile
float3 EnvBRDFApprox( float3 SpecularColor, float Roughness, float NoV )
{
	const float4 c0 = float4( -1, -0.0275, -0.572, 0.022 );
	const float4 c1 = float4( 1, 0.0425, 1.04, -0.04 );
	float4 r = Roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
	float2 AB = float2( -1.04, 1.04 ) * a004 + r.zw;
	return SpecularColor * AB.x + AB.y;
}

//////////////////////////////////////////////////////////////////////////
// BRDF_BlinnPhong
float3 BRDF_BlinnPhong( Light InLight, in Surface InSurface )
{
	// Shared utility.
	float3 LightVector = normalize( InLight.Position_.xyz - InSurface.SurfacePosition_ );
	float3 HalfVector = normalize( LightVector + InSurface.ViewVector_ );
	float NdotL = max( LIGHTING_EPSILON, dot( InSurface.Normal_, LightVector ) );
	float NdotH = max( LIGHTING_EPSILON, dot( InSurface.Normal_, HalfVector ) );
	float LdotH = max( LIGHTING_EPSILON, dot( LightVector, HalfVector ) );
	float VdotH = max( LIGHTING_EPSILON, dot( InSurface.ViewVector_, HalfVector ) );

	// Calculate terms for spec + diffuse.
	float D = NDF_BlinnPhongNormalised( NdotH, RoughnessToSpecularPower( InSurface.Roughness_ ) );
	float G = GeometryVisibility_CookTorrence( NdotL, InSurface.NdotV_, NdotH, VdotH );
	float3 Fspec = Fresnel_SchlickApproximation( InSurface.SpecularColour_, LdotH );
	float3 SpecularColour = Fspec * D * G;

	// Diffuse
	float INV_PI = 1.0 / PI;
	float3 DiffuseColour = float3( INV_PI, INV_PI, INV_PI );
	DiffuseColour *= InSurface.DiffuseColour_;

	// Total colour.
	float3 Total = DiffuseColour + SpecularColour;

	// Punctual light source.
	Total = Total * InLight.Colour_ * NdotL;

	return Total;
}

//////////////////////////////////////////////////////////////////////////
// BRDF_GGX
float3 BRDF_GGX( Light InLight, in Surface InSurface )
{
	// Shared utility.
	float3 LightVector = normalize( InLight.Position_.xyz - InSurface.SurfacePosition_ );
	float3 HalfVector = normalize( LightVector + InSurface.ViewVector_ );
	float NdotL = max( LIGHTING_EPSILON, dot( InSurface.Normal_, LightVector ) );
	float NdotH = max( LIGHTING_EPSILON, dot( InSurface.Normal_, HalfVector ) );
	float LdotH = max( LIGHTING_EPSILON, dot( LightVector, HalfVector ) );
	float VdotH = max( LIGHTING_EPSILON, dot( InSurface.ViewVector_, HalfVector ) );

	// Calculate terms for spec + diffuse.
	float D = NDF_GGX( NdotH, InSurface.Roughness_ );
	float G = GeometryVisibility_SmithGGXApprox( LdotH, InSurface.Roughness_ );
	float3 Fspec = Fresnel_SchlickApproximation( InSurface.SpecularColour_, LdotH );
	float3 SpecularColour = Fspec * D * G;

	// Diffuse
	float INV_PI = 1.0 / PI;
	float3 DiffuseColour = float3( INV_PI, INV_PI, INV_PI );
	DiffuseColour *= InSurface.DiffuseColour_;

	// Total colour.
	float3 Total = DiffuseColour + SpecularColour;

	// Punctual light source.
	Total = Total * InLight.Colour_ * NdotL;

	// BUG: When using GGX we sometimes end up with a negative value.
	// Need to investigate this further. For now this max works around the issue.
	Total = max( Total, float3( 0.0, 0.0, 0.0 ) );

	return Total;
}
//////////////////////////////////////////////////////////////////////////
// BRDF_Default
float3 BRDF_Default( Light InLight, in Surface InSurface )
{
	// Calculate terms for spec + diffuse.
#if USE_SPECULAR_BLINN_PHONG
	return BRDF_BlinnPhong( InLight, InSurface );
#elif USE_SPECULAR_GGX
	return BRDF_GGX( InLight, InSurface );
#else
#  error No other specular model supported.
#endif
}

//////////////////////////////////////////////////////////////////////////
// ApplyReflection
float3 ApplyReflection( in Surface InSurface, float3 ReflectionColour )
{
	return ReflectionColour * EnvBRDFApprox( InSurface.SpecularColour_, InSurface.Roughness_, InSurface.NdotV_ );
}

#endif // __PSYBRUSLIGHTING_PSH__
