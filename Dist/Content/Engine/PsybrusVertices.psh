#ifndef __PSYBRUSVERTICES_PSH__
#define __PSYBRUSVERTICES_PSH__

#include <PsybrusUtility.psh>
#include <PsybrusUniforms.psh>

//////////////////////////////////////////////////////////////////////////
// Input attributes for GLSL
#define VsPosition gl_Position

#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_D3D11

#  define DECLARE_IN( _Ty, _Name, _Semantic )			_Ty _Name : _Semantic
#  define DECLARE_OUT( _Ty, _Name, _Semantic )			_Ty _Name : _Semantic

#  define IN( _Name ) i._Name
#  define OUT( _Name ) o._Name
#  define OUT_POSITION o.Position_

#  define VS_IN_BEGIN struct VS_INPUT {
#  define VS_IN_END };

#  define VS_OUT_BEGIN struct VS_OUTPUT { float4 Position_ : SV_POSITION; 
#  define VS_OUT_END };

#  define VS_MAIN( _Name ) VS_OUTPUT _Name( VS_INPUT i )
#  define VS_ENTER VS_OUTPUT o = (VS_OUTPUT)0
#  define VS_EXIT return o


#  define GS_IN_BEGIN struct GS_INPUT {
#  define GS_IN_END };

#  define GS_OUT_BEGIN struct GS_OUTPUT {
#  define GS_OUT_END };

#  define GS_MAIN( _Name ) GS_OUTPUT _Name( GS_INPUT i )
#  define GS_ENTER GS_OUTPUT o = (GS_OUTPUT)0
#  define GS_EXIT return o


#  define PS_IN_BEGIN struct PS_INPUT { float4 Position_ : SV_POSITION; 
#  define PS_IN_END };

#  define PS_MAIN( _Name ) PS_OUTPUT_INTERNAL _Name( PS_INPUT i )
#  define PS_ENTER PS_OUTPUT_INTERNAL o = (PS_OUTPUT_INTERNAL)0
#  define PS_EXIT return o


#elif ( PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL || PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL_ES )

#  define DECLARE_IN( _Ty, _Name, _Semantic ) in _Ty _Name : _Semantic
#  define DECLARE_OUT( _Ty, _Name, _Semantic ) out _Ty _Name : _Semantic

#  define IN( _Name ) _Name
#  define OUT( _Name ) _Name
#  define OUT_POSITION gl_Position

#  define VS_IN_BEGIN
#  define VS_IN_END

#  define VS_OUT_BEGIN
#  define VS_OUT_END

#  define VS_MAIN( _Name ) void _Name()
#  define VS_ENTER
#  define VS_EXIT

#  define GS_IN_BEGIN
#  define GS_IN_END

#  define GS_OUT_BEGIN
#  define GS_OUT_END

#  define GS_MAIN( _Name ) void _Name()
#  define GS_ENTER
#  define GS_EXIT


#  define PS_IN_BEGIN
#  define PS_IN_END

#  define PS_MAIN( _Name ) void _Name()
#  define PS_ENTER
#  define PS_EXIT

#endif


//////////////////////////////////////////////////////////////////////////
// Setup semantics for HLSL
#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_D3D11
#  define SEMANTIC_BLENDINDICES i.InBlendIndices_
#  define SEMANTIC_BLENDWEIGHTS i.InBlendWeights_
#  define SEMANTIC_TANGENT i.InTangent_
#  define BLENDINDICES_TYPE uint4
#else
#  define BLENDINDICES_TYPE vec4
#endif

//////////////////////////////////////////////////////////////////////////
// Utility macros for different mesh permutations.
#if defined( PERM_MESH_STATIC_2D )

/**
 * Make a world space vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = float4( _v.xy, 0.0, 1.0 )

/**
 * Make a world space normal.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output normal. Should be float4.
 * @param _v Input normal. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = float4( _v.xy, 0.0, 1.0 )

#elif defined( PERM_MESH_STATIC_3D )

/**
 * Make a world space vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = mul( WorldTransform_, _v )

/**
 * Make a world space normal.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output normal. Should be float4.
 * @param _v Input normal. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = mul( NormalTransform_, _v ); \
	_o.xyz = normalize( _o.xyz )

#elif defined( PERM_MESH_SKINNED_3D )

/**
 * Make a world space vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o =  mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.x) ], _v ) * SEMANTIC_BLENDWEIGHTS.x; \
	_o += mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.y) ], _v ) * SEMANTIC_BLENDWEIGHTS.y; \
	_o += mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.z) ], _v ) * SEMANTIC_BLENDWEIGHTS.z; \
	_o += mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.w) ], _v ) * SEMANTIC_BLENDWEIGHTS.w

/**
 * Make a world space normal.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output normal. Should be float4.
 * @param _v Input normal. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o =  float4( mul( getFloat3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.x) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.x, 0.0 ); \
	_o += float4( mul( getFloat3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.y) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.y, 0.0 ); \
	_o += float4( mul( getFloat3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.z) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.z, 0.0 ); \
	_o += float4( mul( getFloat3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.w) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.w, 0.0 ); \
	_o.xyz = normalize( _o.xyz )

#elif defined( PERM_MESH_PARTICLE_3D )

/**
 * Make a world space vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
  */
  
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = _v + float4( mul( getFloat3x3(InverseViewTransform_), SEMANTIC_TANGENT.xyz ), 0.0 )

#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = _v

#elif defined( PERM_MESH_INSTANCED_3D )

/**
 * Make a world space vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
  */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = mul( WorldTransform_, _v )
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = normalize( mul( NormalTransform_, _v ) )

#endif

////////////////////////////////////////////////////////////////////////
// PSY_MAKE_CLIP_SPACE_VERTEX
#if defined( PERM_MESH_STATIC_2D )

/**
 * Make a clip transformed vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_CLIP_SPACE_VERTEX( _o, _v ) \
		_o = _v

#else

/**
 * Make a clip transformed vertex.
 * In HLSL, expects a variable 'i' to exist in scope, containing vertex inputs.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_CLIP_SPACE_VERTEX( _o, _v ) \
		_o = mul( ClipTransform_, _v )

#endif

#endif // __PSYBRUSVERTICES_PSH__
