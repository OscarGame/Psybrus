#pragma once

#include <PsybrusTypes.psh>

//////////////////////////////////////////////////////////////////////////
// Input attributes for GLSL
#define VsPosition gl_Position

#if ( PSY_OUTPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL && PSY_OUTPUT_CODE_TYPE >= PSY_CODE_TYPE_GLSL_140 ) || ( PSY_OUTPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL_ES && PSY_OUTPUT_CODE_TYPE >= PSY_CODE_TYPE_GLSL_ES_300 )
#  define VS_IN( _Ty, _Name, _Semantic )		in _Ty _Name : _Semantic
#  define VS_OUT( _Ty, _Name )					out _Ty _Name

#  define GS_IN( _Ty, _Name )					in _Ty _Name
#  define GS_OUT( _Ty, _Name )					out _Ty _Name

#  define PS_IN( _Ty, _Name )					in _Ty _Name

#else
#  define VS_IN( _Ty, _Name, _Semantic ) 		attribute _Ty _Name : _Semantic
#  define VS_OUT( _Ty, _Name )					varying _Ty _Name

#  define GS_IN( _Ty, _Name )					in _Ty _Name
#  define GS_OUT( _Ty, _Name )					out _Ty _Name

#  define PS_IN( _Ty, _Name )					varying _Ty _Name

#endif

//////////////////////////////////////////////////////////////////////////
// Setup semantics for HLSL
#if PSY_OUTPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_D3D11
#  define SEMANTIC_BLENDINDICES i.BlendIndices_
#  define SEMANTIC_BLENDWEIGHTS i.BlendWeights_
#  define SEMANTIC_TANGENT i.Tangent_
#endif

//////////////////////////////////////////////////////////////////////////
// Utility macros for different mesh permutations.
#if defined( PERM_MESH_STATIC_2D )

/**
 * Make a world space vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = float4( _v.xy, 0.0, 1.0 );

/**
 * Make a world space normal.
 * @param _o Output normal. Should be float4.
 * @param _v Input normal. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = float4( _v.xy, 0.0, 1.0 );

#elif defined( PERM_MESH_STATIC_3D )

/**
 * Make a world space vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = mul( WorldTransform_, _v );

/**
 * Make a world space normal.
 * @param _o Output normal. Should be float4.
 * @param _v Input normal. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = mul( NormalTransform_, _v ); \
	_o.xyz = normalize( _o.xyz );

#elif defined( PERM_MESH_SKINNED_3D )

/**
 * Make a world space vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o =  mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.x) ], _v ) * SEMANTIC_BLENDWEIGHTS.x; \
	_o += mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.y) ], _v ) * SEMANTIC_BLENDWEIGHTS.y; \
	_o += mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.z) ], _v ) * SEMANTIC_BLENDWEIGHTS.z; \
	_o += mul( BoneTransform_[ int(SEMANTIC_BLENDINDICES.w) ], _v ) * SEMANTIC_BLENDWEIGHTS.w;

/**
 * Make a world space normal.
 * @param _o Output normal. Should be float4.
 * @param _v Input normal. Should be float4.
 */
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o =  float4( mul( float3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.x) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.x, 0.0 ); \
	_o += float4( mul( float3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.y) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.y, 0.0 ); \
	_o += float4( mul( float3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.z) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.z, 0.0 ); \
	_o += float4( mul( float3x3( BoneTransform_[ int(SEMANTIC_BLENDINDICES.w) ] ), _v.xyz ) * SEMANTIC_BLENDWEIGHTS.w, 0.0 ); \
	_o.xyz = normalize( _o.xyz );

#elif defined( PERM_MESH_PARTICLE_3D )

/**
 * Make a world space vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
  */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = _v + float4( mul( float3x3(InverseViewTransform_), SEMANTIC_TANGENT.xyz ), 1.0 );
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = _v;

#elif defined( PERM_MESH_INSTANCED_3D )

/**
 * Make a world space vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
  */
#  define PSY_MAKE_WORLD_SPACE_VERTEX( _o, _v ) \
	_o = mul( WorldTransform_, _v );
#  define PSY_MAKE_WORLD_SPACE_NORMAL( _o, _v ) \
	_o = normalize( mul( NormalTransform_, _v ) );

#endif

////////////////////////////////////////////////////////////////////////
// PSY_MAKE_CLIP_SPACE_VERTEX
#if defined( PERM_MESH_STATIC_2D )

/**
 * Make a clip transformed vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_CLIP_SPACE_VERTEX( _o, _v ) \
		_o = _v;

#else

/**
 * Make a clip transformed vertex.
 * @param _o Output vertex. Should be float4.
 * @param _v Input vertex. Should be float4.
 */
#  define PSY_MAKE_CLIP_SPACE_VERTEX( _o, _v ) \
		_o = mul( ClipTransform_, _v );

#endif


