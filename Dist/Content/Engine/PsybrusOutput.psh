#ifndef __PSYBRUSOUTPUT_PSH__
#define __PSYBRUSOUTPUT_PSH__

#include <PsybrusTypes.psh>
#include <PsybrusUtility.psh>

//////////////////////////////////////////////////////////////////////////
// Fragment writing.
#if PIXEL_SHADER

#if PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_D3D11

#  if !defined( NOOF_OUTPUT_FRAGMENTS )
#    if defined( PERM_RENDER_DEFERRED )
#      define NOOF_MAX_OUTPUT_FRAGMENTS 4
#      define NOOF_OUTPUT_FRAGMENTS 4
#    else 
#      define NOOF_MAX_OUTPUT_FRAGMENTS 1
#      define NOOF_OUTPUT_FRAGMENTS 1
#    endif
#  else
#    define NOOF_MAX_OUTPUT_FRAGMENTS NOOF_OUTPUT_FRAGMENTS
#  endif

struct PS_OUTPUT_INTERNAL
{
	float4 Output_[ NOOF_MAX_OUTPUT_FRAGMENTS ] : SV_TARGET;
};

#  define outputFrag o.Output_
#  define FRAMEBUFFER_OUTPUT i, o
#  define FRAMEBUFFER_INPUT in PS_INPUT i, inout PS_OUTPUT_INTERNAL o
#  define FRAMEBUFFER_INTERNAL i, o

void clearFrag( FRAMEBUFFER_INPUT )
{
#  if NOOF_OUTPUT_FRAGMENTS >= 1
	o.Output_[0] = float4( 1.0, 1.0, 1.0, 1.0 );
#  endif

#  if NOOF_OUTPUT_FRAGMENTS >= 2
	o.Output_[1] = float4( 1.0, 1.0, 1.0, 1.0 );
#  endif

#  if NOOF_OUTPUT_FRAGMENTS >= 3
	o.Output_[2] = float4( 1.0, 1.0, 1.0, 1.0 );
#  endif

#  if NOOF_OUTPUT_FRAGMENTS >= 4
	o.Output_[3] = float4( 0.0, 0.0, 0.0, 0.0 );
#  endif
}

void writeFrag( FRAMEBUFFER_INPUT, in float4 Colour )
{
	clearFrag( FRAMEBUFFER_INTERNAL );
	o.Output_[0] = Colour;
}

void writeFrag( FRAMEBUFFER_INPUT, in float4 Albedo, in float3 Normal )
{
	clearFrag( FRAMEBUFFER_INTERNAL );
	o.Output_[0].xyzw = Albedo.xyzw;
#  if defined( PERM_RENDER_DEFERRED )
	o.Output_[2].xyz = encodeNormal( Normal.xyz );
#  endif
}

void writeFrag( FRAMEBUFFER_INPUT, in float4 Albedo, in float3 Normal, in float3 Material )
{
	clearFrag( FRAMEBUFFER_INTERNAL );
	o.Output_[0].xyzw = Albedo.xyzw;
#  if defined( PERM_RENDER_DEFERRED )
	o.Output_[1].xyz = Material;
	o.Output_[2].xyz = encodeNormal( Normal.xyz );
#  endif
}

void writeVelocity( FRAMEBUFFER_INPUT, in float2 Velocity )
{
#  if defined( PERM_RENDER_DEFERRED )
	o.Output_[3].xy = Velocity;
#  endif
}

#elif PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL ||  PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL

#  if !defined( NOOF_OUTPUT_FRAGMENTS )
#    if defined( PERM_RENDER_DEFERRED )
#      define NOOF_MAX_OUTPUT_FRAGMENTS 4
#      define NOOF_OUTPUT_FRAGMENTS 4
#    else 
#      define NOOF_MAX_OUTPUT_FRAGMENTS 1
#      define NOOF_OUTPUT_FRAGMENTS 1
#    endif
#  else
#    define NOOF_MAX_OUTPUT_FRAGMENTS NOOF_OUTPUT_FRAGMENTS
#  endif

#  if PSY_OUTPUT_CODE_TYPE == PSY_CODE_TYPE_ESSL_100
#    undef NOOF_MAX_OUTPUT_FRAGMENTS
#    undef NOOF_OUTPUT_FRAGMENTS
#    define NOOF_MAX_OUTPUT_FRAGMENTS 1
#    define NOOF_OUTPUT_FRAGMENTS 1
#    define outputFrag gl_FragData
#    if NOOF_MAX_OUTPUT_FRAGMENTS == 1
#      define FRAMEBUFFER_OUTPUT outputFrag[0]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0
#      define FRAMEBUFFER_INTERNAL outFrag0
#    elif NOOF_MAX_OUTPUT_FRAGMENTS == 2
#      define FRAMEBUFFER_OUTPUT outputFrag[0], outputFrag[1]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0, inout float4 outFrag1
#      define FRAMEBUFFER_INTERNAL outFrag0, outFrag1
#    elif NOOF_MAX_OUTPUT_FRAGMENTS == 3
#      define FRAMEBUFFER_OUTPUT outputFrag[0], outputFrag[1], outputFrag[2]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0, inout float4 outFrag1, inout float4 outFrag2
#      define FRAMEBUFFER_INTERNAL outFrag0, outFrag1, outFrag2
#    elif NOOF_MAX_OUTPUT_FRAGMENTS == 4
#      define FRAMEBUFFER_OUTPUT outputFrag[0], outputFrag[1], outputFrag[2], outputFrag[3]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0, inout float4 outFrag1, inout float4 outFrag2, inout float4 outFrag3
#      define FRAMEBUFFER_INTERNAL outFrag0, outFrag1, outFrag2, outFrag3
#    endif

#  elif PSY_OUTPUT_CODE_TYPE >= PSY_CODE_TYPE_GLSL_330
out float4 outputFrag[NOOF_MAX_OUTPUT_FRAGMENTS];
#    if NOOF_MAX_OUTPUT_FRAGMENTS == 1
#      define FRAMEBUFFER_OUTPUT outputFrag[0]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0
#      define FRAMEBUFFER_INTERNAL outFrag0
#    elif NOOF_MAX_OUTPUT_FRAGMENTS == 2
#      define FRAMEBUFFER_OUTPUT outputFrag[0], outputFrag[1]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0, inout float4 outFrag1
#      define FRAMEBUFFER_INTERNAL outFrag0, outFrag1
#    elif NOOF_MAX_OUTPUT_FRAGMENTS == 3
#      define FRAMEBUFFER_OUTPUT outputFrag[0], outputFrag[1], outputFrag[2]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0, inout float4 outFrag1, inout float4 outFrag2
#      define FRAMEBUFFER_INTERNAL outFrag0, outFrag1, outFrag2
#    elif NOOF_MAX_OUTPUT_FRAGMENTS == 4
#      define FRAMEBUFFER_OUTPUT outputFrag[0], outputFrag[1], outputFrag[2], outputFrag[3]
#      define FRAMEBUFFER_INPUT inout float4 outFrag0, inout float4 outFrag1, inout float4 outFrag2, inout float4 outFrag3
#      define FRAMEBUFFER_INTERNAL outFrag0, outFrag1, outFrag2, outFrag3
#    endif
#  endif

void clearFrag( FRAMEBUFFER_INPUT )
{
#  if NOOF_OUTPUT_FRAGMENTS >= 1
	outFrag0 = float4( 1.0, 1.0, 1.0, 1.0 );
#  endif

#  if NOOF_OUTPUT_FRAGMENTS >= 2
	outFrag1 = float4( 1.0, 1.0, 1.0, 1.0 );
#  endif

#  if NOOF_OUTPUT_FRAGMENTS >= 3
	outFrag2 = float4( 1.0, 1.0, 1.0, 1.0 );
#  endif

#  if NOOF_OUTPUT_FRAGMENTS >= 4
	outFrag3 = float4( 0.0, 0.0, 0.0, 0.0 );
#  endif
}

void writeFrag( FRAMEBUFFER_INPUT, in float4 Colour )
{
	clearFrag( FRAMEBUFFER_INTERNAL );
	outFrag0 = Colour;
}

void writeFrag( FRAMEBUFFER_INPUT, in float4 Albedo, in float3 Normal )
{
	clearFrag( FRAMEBUFFER_INTERNAL );
	outFrag0.xyzw = Albedo.xyzw;
#  if defined( PERM_RENDER_DEFERRED ) && NOOF_MAX_OUTPUT_FRAGMENTS > 1
	outFrag2.xyz = encodeNormal( Normal.xyz );
#  endif
}

void writeFrag( FRAMEBUFFER_INPUT, in float4 Albedo, in float3 Normal, in float3 InMaterial )
{
	clearFrag( FRAMEBUFFER_INTERNAL );
	outFrag0.xyzw = Albedo.xyzw;
#  if defined( PERM_RENDER_DEFERRED ) && NOOF_MAX_OUTPUT_FRAGMENTS > 1
	outFrag1.xyz = InMaterial;
	outFrag2.xyz = encodeNormal( Normal.xyz );
#  endif
}

void writeVelocity( FRAMEBUFFER_INPUT, in float2 Velocity )
{
#  if defined( PERM_RENDER_DEFERRED ) && NOOF_MAX_OUTPUT_FRAGMENTS > 1
	outFrag3.xy = Velocity;
#  endif
}

#  endif // PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_GLSL ||  PSY_INPUT_BACKEND_TYPE == PSY_BACKEND_TYPE_ESSL


#if defined( INTERNAL_PIXEL_COMPLEXITY )
//////////////////////////////////////////////////////////////////////////
// internalPixelComplexity
PS_MAIN( internalPixelComplexity )
{
	PS_ENTER;
	float4 Albedo = float4( INTERNAL_PIXEL_COMPLEXITY, INTERNAL_PIXEL_COMPLEXITY, INTERNAL_PIXEL_COMPLEXITY, 1.0 );
	writeFrag( FRAMEBUFFER_OUTPUT, Albedo, float3( 0.0, 0.0, 1.0 ), float3( 1.0, 1.0, 1.0 ) );
	pixelAll( FRAMEBUFFER_OUTPUT );
	PS_EXIT;
}
#endif // defined( INTERNAL_PIXEL_COMPLEXITY )

#endif // PIXEL_SHADER




#endif // __PSYBRUSOUTPUT_PSH__
